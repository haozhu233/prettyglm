% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/one_way_ave.R
\name{one_way_ave}
\alias{one_way_ave}
\title{one_way_ave}
\usage{
one_way_ave(
  feature_to_plot,
  model_object,
  target_variable,
  data_set,
  Plot_Type = "predictions",
  plot_factor_as_numeric = FALSE,
  ordering = NULL,
  plotlyplot = TRUE,
  width = 800,
  height = 500,
  Return_data = F,
  number_of_buckets = NULL,
  first_colour = "black",
  second_colour = "#cc4678",
  variable_to_facet_by = NULL,
  predict_function = NULL
)
}
\arguments{
\item{feature_to_plot}{A string of the variable to plot.}

\item{model_object}{Model object to create coefficient table for. Must be of type: \link[stats]{glm}, \link[stats]{lm},  \link[parsnip]{linear_reg} or \link[parsnip]{logistic_reg}}

\item{target_variable}{String of target variable name in dataset.}

\item{data_set}{Data set to calculate the actual vs expected for. If no input default is to try and extract training data from model object.}

\item{plot_factor_as_numeric}{Set to TRUE to return \link[base]{data.frame} instead of creating \link[knitr]{kable}.}

\item{ordering}{Option to change the ordering of categories on the x axis, only for discrete categories. Default to the ordering of the factor. Other options are: 'alphabetical', 'Number of records', 'Average Value'}

\item{width}{Width of plot}

\item{height}{Height of plot}

\item{number_of_buckets}{Number of buckets for continuous variable plots}

\item{first_colour}{First colour to plot, usually the colour of actual.}

\item{second_colour}{Second colour to plot, usually the colour of predicted.}

\item{variable_to_facet_by}{Variable to facet the actual vs expect plots by.}

\item{predict_function}{to use. Still in development.}

\item{return_data}{Set to TRUE to return data set instead of plot}
}
\value{
plotly plot of one way actual vs expected \link[base]{data.frame} if return_data = TRUE.
}
\description{
Creates a pretty html plot of one way actual vs expected by specified predictor.
}
\examples{
library(dplyr)
library(prettyglm)
data('titanic')
columns_to_factor <- c('Pclass',
                       'Sex',
                       'Cabin',
                       'Embarked',
                       'Cabintype',
                       'Survived')
titanic  <- titanic  \%>\%
  dplyr::mutate_at(columns_to_factor, list(~factor(.)))
# Fit a model without Pclass to see ave.
survival_model <- stats::glm(Survived ~
                              #Pclass +
                              Sex +
                              Age +
                              Fare +
                              Embarked +
                              SibSp +
                              Parch +
                              Cabintype,
                             data = titanic,
                             family = binomial(link = 'logit'))

}
